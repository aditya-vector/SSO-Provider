require 'rails_helper'
require 'jwt'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TicketsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Ticket. As you add validations to Ticket, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:user_token_header) do
    header = JWT.encode({ user_id: user.id }, Rails.application.secrets.secret_key_base)
    "Bearer #{header}"
  end
  let(:support_user) do
    support_user = create(:user)
    support_user.add_role(:support)
    support_user
  end
  let(:support_user_token_header) do
    header = JWT.encode({ user_id: support_user.id }, Rails.application.secrets.secret_key_base)
    "Bearer #{header}"
  end
  let(:admin_user) do
    admin_user = create(:user)
    admin_user.add_role(:admin)
    admin_user
  end
  let(:admin_user_token_header) do
    header = JWT.encode({ user_id: admin_user.id }, Rails.application.secrets.secret_key_base)
    "Bearer #{header}"
  end

  let(:valid_attributes) do
    {
      category: Ticket::CATEGORIES.sample,
      status: Ticket::STATUSES.sample, user_description: Faker::Lorem.sentence,
      support_description: Faker::Lorem.sentence,
      user_id: user.id, support_user_id: support_user.id
    }
  end

  let(:invalid_attributes) do
    { user: Faker::Lorem.word, email: Faker::Internet.email, username: Faker::Lorem.word }
  end

  describe 'GET #index' do
    before do
      create_list(:ticket, 5)
    end
    context 'when user is admin' do
      it 'returns list of all tickets' do
        request.headers.merge('Authorization' => admin_user_token_header)
        get :index
        expect(assigns(:tickets)).to eq(Ticket.all)
      end
    end
    context 'when user is support_user' do
      it 'returns list of all tickets' do
        request.headers.merge('Authorization' => support_user_token_header)
        get :index
        expect(assigns(:tickets)).to eq(Ticket.all)
      end
    end
    context 'when user has no role' do
      it 'returns list of tickets associated to user' do
        create(:ticket, user: user)
        request.headers.merge('Authorization' => user_token_header)
        get :index
        expect(assigns(:tickets)).to eq(user.tickets)
      end
    end
  end

  describe 'GET #show' do
    before do
      create_list(:ticket, 5)
    end
    context 'when user is admin' do
      it 'can fetch any ticket' do
        ticket = Ticket.where.not(user_id: admin_user.id).last
        request.headers.merge('Authorization' => admin_user_token_header)
        get :show, params: { id: Ticket.where.not(user_id: admin_user.id).last.id }
        expect(response).to be_success
        expect(response).to have_http_status(200)
        expect(assigns(:ticket)).to eq(ticket)
      end
    end
    context 'when user is support_user' do
      it 'can fetch any ticket' do
        ticket = Ticket.where.not(user_id: admin_user.id).last
        request.headers.merge('Authorization' => support_user_token_header)
        get :show, params: { id: Ticket.where.not(user_id: admin_user.id).last.id }
        expect(response).to be_success
        expect(response).to have_http_status(200)
        expect(assigns(:ticket)).to eq(ticket)
      end
    end
    context 'when user has no role' do
      it 'can fetch ticket created by user' do
        ticket = create(:ticket, user: user)
        request.headers.merge('Authorization' => user_token_header)
        get :show, params: { id: ticket.id }
        expect(response).to be_success
        expect(response).to have_http_status(200)
        expect(assigns(:ticket)).to eq(ticket)
      end
      it 'cannot fetch ticket created by another user' do
        ticket = create(:ticket)
        request.headers.merge('Authorization' => user_token_header)
        get :show, params: { id: ticket.id }
        expect(response).to have_http_status(401)
        expect(JSON.parse(response.body)['error']).to eq(I18n.t('errors.unauthorized'))
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Ticket' do
        request.headers.merge('Authorization' => user_token_header)
        expect do
          post :create, params: { ticket: valid_attributes }
        end.to change(Ticket, :count).by(1)
      end

      it 'assigns a newly created ticket as @ticket' do
        request.headers.merge('Authorization' => user_token_header)
        post :create, params: { ticket: valid_attributes }
        expect(assigns(:ticket)).to be_a(Ticket)
        expect(assigns(:ticket)).to be_persisted
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved ticket as @ticket' do
        request.headers.merge('Authorization' => user_token_header)
        expect do
          post :create, params: { ticket: invalid_attributes }
        end.to change(Ticket, :count).by(0)
        expect(assigns(:ticket)).to be_a_new(Ticket)
        expect(response).to have_http_status(422)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          category: Ticket::CATEGORIES.sample,
          status: Ticket::STATUSES.sample, user_description: Faker::Lorem.sentence,
          support_description: Faker::Lorem.sentence,
          user_id: user.id, support_user_id: support_user.id
        }
      end
      context 'with user having no assigned role' do
        it 'should not allow user to update the ticket' do
          ticket = create(:ticket)
          request.headers.merge('Authorization' => user_token_header)
          put :update, params: { id: ticket.to_param, ticket: new_attributes }
          expect(response).to have_http_status(401)
          expect(JSON.parse(response.body)['error']).to eq(I18n.t('errors.unauthorized'))
        end
      end
      context 'with user having admin role' do
        it 'updates the requested ticket' do
          ticket = create(:ticket)
          request.headers.merge('Authorization' => admin_user_token_header)
          put :update, params: { id: ticket.to_param, ticket: new_attributes }
          ticket.reload
          expect(ticket.category).to eq(new_attributes[:category])
          expect(ticket.status).to eq(new_attributes[:status])
        end
      end
      context 'user having support role' do
        it 'updates the requested ticket' do
          ticket = create(:ticket)
          request.headers.merge('Authorization' => support_user_token_header)
          put :update, params: { id: ticket.to_param, ticket: new_attributes }
          ticket.reload
          expect(ticket.category).to eq(new_attributes[:category])
          expect(ticket.status).to eq(new_attributes[:status])
        end
      end
    end

    context 'with invalid params' do
      it 'assigns the ticket as @ticket' do
        ticket = create(:ticket)
        request.headers.merge('Authorization' => support_user_token_header)
        put :update, params: { id: ticket.to_param, ticket: invalid_attributes }
        expect(assigns(:ticket)).to eq(ticket)
        expect(ticket.changed?).to eq(false)
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'when user has role admin' do
      it 'destroys the requested ticket' do
        ticket = create(:ticket)
        request.headers.merge('Authorization' => admin_user_token_header)
        expect do
          delete :destroy, params: { id: ticket.to_param }
        end.to change(Ticket, :count).by(-1)
      end
    end
    context 'when user has other role' do
      it 'does not destroy the requested ticket' do
        ticket = create(:ticket)
        request.headers.merge('Authorization' => user_token_header)
        expect do
          delete :destroy, params: { id: ticket.to_param }
        end.to change(Ticket, :count).by(0)
        expect(response).to have_http_status(401)
        expect(JSON.parse(response.body)['error']).to eq(I18n.t('errors.unauthorized'))
      end
      it 'destroys the requested ticket' do
        ticket = create(:ticket)
        request.headers.merge('Authorization' => support_user_token_header)
        expect do
          delete :destroy, params: { id: ticket.to_param }
        end.to change(Ticket, :count).by(0)
        expect(response).to have_http_status(401)
        expect(JSON.parse(response.body)['error']).to eq(I18n.t('errors.unauthorized'))
      end
    end
  end
end
